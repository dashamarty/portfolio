"use client";
import Image from "next/image";
import styles from "./projectDetail.module.scss";
import { useState } from "react";
import Modal from "../imageModal/imageModal";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
type Content =
  | { type: "text"; text: string | React.ReactNode } // –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
  | { type: "image"; src: string; alt: string } // –¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞
  | {
      type: "imageText";
      src: string;
      alt: string;
      text: string | React.ReactNode;
    } // –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
  | { type: "fullScreenImage"; src: string; alt: string } // –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
  | { type: "textList"; text: string | React.ReactNode; listItems: string[] } // –°–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
  | {
      type: "textTitleText";
      title: string;
      text: string | React.ReactNode;
      additionalText?: string | React.ReactNode;
    } // –¢–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  | { type: "titleText"; title: string; text: string | React.ReactNode } // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
  | { type: "halfScreenImage"; src: string; alt: string }
  | {
      type: "textListText";
      text: string | React.ReactNode;
      listItems: string[];
      additionalText: string | React.ReactNode;
    } // –°–ø–∏—Å–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  | { type: "video"; src: string; poster?: string }
  | { type: "fullText"; text: string };

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProjectDetail, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –µ–≥–æ
type ProjectDetailProps = {
  content: unknown; // –ò—Å–ø–æ–ª—å–∑—É–µ–º unknown –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
};

export const ProjectDetail: React.FC<ProjectDetailProps> = ({ content }) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalImage, setModalImage] = useState<string | null>(null);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  const openModal = (src: string) => {
    setModalImage(src);
    setIsModalOpen(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  const closeModal = () => {
    setIsModalOpen(false);
    setModalImage(null);
  };
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ content —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª–µ–º type
  if (typeof content === "object" && content !== null && "type" in content) {
    const contentAs = content as Content; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º content –≤ —Ç–∏–ø Content

    switch (contentAs.type) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
      case "text":
        return typeof contentAs.text === "string" ? (
          <p
            className={styles.textFlex}
            dangerouslySetInnerHTML={{ __html: contentAs.text }}
          /> // –¢–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        ) : (
          <p className={styles.text}>{contentAs.text}</p> // JSX –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      case "image":
        return (
          <div className={styles.imageContainer}>
            <Image
              className={styles.image} // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              src={contentAs.src}
              alt={contentAs.alt}
              width={2000}
              height={2000}
            />
            <div
              className={styles.magnifier}
              onClick={() => openModal(contentAs.src)} // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É
            >
              <svg
                width="31"
                height="31"
                viewBox="0 0 31 31"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15.5 16.5L25.2732 28.3233M19.3748 10.414C19.3748 15.2739 15.4352 19.2135 10.5754 19.2135C5.71554 19.2135 1.77588 15.2739 1.77588 10.414C1.77588 5.55422 5.71554 1.61456 10.5754 1.61456C15.4352 1.61456 19.3748 5.55422 19.3748 10.414Z"
                  stroke="#AA0202"
                  strokeWidth="3.22917"
                />
              </svg>
            </div>
            {isModalOpen && modalImage && (
              <Modal
                src={modalImage}
                alt={contentAs.alt}
                onClose={closeModal} // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
              />
            )}
          </div>
        );

      case "halfScreenImage":
        return (
          <div className={styles.imageContainer}>
            <Image
              className={styles.ImageHalfScreen} // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–ª —ç–∫—Ä–∞–Ω–∞
              src={contentAs.src}
              alt={contentAs.alt}
              width={960}
              height={540}
            />
            <div
              className={styles.magnifier}
              onClick={() => openModal(contentAs.src)} // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É
            >
              üîç
            </div>
            {isModalOpen && modalImage && (
              <Modal
                src={modalImage}
                alt={contentAs.alt}
                onClose={closeModal} // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
              />
            )}
          </div>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
      case "imageText":
        return (
          <div className={styles.ImageText}>
            <div className={styles.imageContainer}>
              <Image
                src={contentAs.src}
                alt={contentAs.alt}
                width={2000}
                height={2000}
                className={styles.image}
              />
              <div
                className={styles.magnifier}
                onClick={() => openModal(contentAs.src)} // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É
              >
                <svg
                  width="31"
                  height="31"
                  viewBox="0 0 31 31"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M15.5 16.5L25.2732 28.3233M19.3748 10.414C19.3748 15.2739 15.4352 19.2135 10.5754 19.2135C5.71554 19.2135 1.77588 15.2739 1.77588 10.414C1.77588 5.55422 5.71554 1.61456 10.5754 1.61456C15.4352 1.61456 19.3748 5.55422 19.3748 10.414Z"
                    stroke="#AA0202"
                    strokeWidth="3.22917"
                  />
                </svg>
              </div>
              {isModalOpen && modalImage && (
                <Modal
                  src={modalImage}
                  alt={contentAs.alt}
                  onClose={closeModal} // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
                />
              )}
            </div>
            {typeof contentAs.text === "string" ? (
              <p className={styles.text}>{contentAs.text}</p> // –¢–µ–∫—Å—Ç —Ä—è–¥–æ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            ) : (
              <p
                dangerouslySetInnerHTML={{ __html: contentAs.text as string }}
              />
            )}
          </div>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      case "fullScreenImage":
        return (
          <>
            <Image
              src={contentAs.src}
              alt={contentAs.alt}
              width={2500}
              height={2000}
              className={styles.imageFull} // –°—Ç–∏–ª–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            />
            <div
              className={styles.magnifier}
              onClick={() => openModal(contentAs.src)} // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É
            >
              <svg
                width="31"
                height="31"
                viewBox="0 0 31 31"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M15.5 16.5L25.2732 28.3233M19.3748 10.414C19.3748 15.2739 15.4352 19.2135 10.5754 19.2135C5.71554 19.2135 1.77588 15.2739 1.77588 10.414C1.77588 5.55422 5.71554 1.61456 10.5754 1.61456C15.4352 1.61456 19.3748 5.55422 19.3748 10.414Z"
                  stroke="#AA0202"
                  strokeWidth="3.22917"
                />
              </svg>
            </div>
            {isModalOpen && modalImage && (
              <Modal
                src={modalImage}
                alt={contentAs.alt}
                onClose={closeModal} // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
              />
            )}
          </>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
      case "textList":
        return (
          <div>
            {typeof contentAs.text === "string" ? (
              <p>{contentAs.text}</p> // –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º
            ) : (
              <p
                dangerouslySetInnerHTML={{ __html: contentAs.text as string }}
              />
            )}
            <ul>
              {contentAs.listItems.map((item, index) => (
                <li key={index}>{item}</li> // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
              ))}
            </ul>
          </div>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
      case "textTitleText":
        return (
          <div className={styles.TextTitleText}>
            <div>
              <h3 className={styles.TextTitleText__Title}>{contentAs.title}</h3>{" "}
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              {typeof contentAs.text === "string" ? (
                <p
                  className={styles.TextTitleText__Text}
                  dangerouslySetInnerHTML={{ __html: contentAs.text as string }}
                ></p> // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
              ) : (
                <p
                  className={styles.TextTitleText__Text}
                  dangerouslySetInnerHTML={{ __html: contentAs.text as string }}
                />
              )}
            </div>
            {contentAs.additionalText && // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
              (typeof contentAs.additionalText === "string" ? (
                <p className={styles.TextTitleText__MainText}>
                  {contentAs.additionalText}
                </p>
              ) : (
                <p
                  className={styles.TextTitleText__MainText}
                  dangerouslySetInnerHTML={{
                    __html: contentAs.additionalText as string,
                  }}
                />
              ))}
          </div>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
      case "titleText":
        return (
          <div className={styles.TitleText}>
            <h2 className={styles.TextTitleText__Title}>{contentAs.title}</h2>
            {typeof contentAs.text === "string" ? (
              <p
                className={styles.TextTitleText__MainText}
                dangerouslySetInnerHTML={{ __html: contentAs.text }}
              />
            ) : (
              <p className={styles.TextTitleText__MainText}>{contentAs.text}</p>
            )}
          </div>
        );

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      case "textListText":
        return (
          <div className={styles.TextListText}>
            <div className={styles.TextListText__ListWrapper}>
              {typeof contentAs.text === "string" ? (
                <p className={styles.TextListText__Text}>{contentAs.text}</p> // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
              ) : (
                <p
                  className={styles.TextListText__Text}
                  dangerouslySetInnerHTML={{ __html: contentAs.text as string }}
                />
              )}
              <ul className={styles.TextListText__List}>
                {contentAs.listItems.map((item, index) => (
                  <li className={styles.TextListText__List__Item} key={index}>
                    {item}
                  </li> // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
                ))}
              </ul>
            </div>
            {typeof contentAs.additionalText === "string" ? (
              <p className={styles.TextListText__MainText}>
                {contentAs.additionalText}
              </p> // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            ) : (
              <p
                className={styles.TextListText__MainText}
                dangerouslySetInnerHTML={{
                  __html: contentAs.additionalText as string,
                }}
              />
            )}
          </div>
        );

      case "video":
        return (
          <video
            className={styles.video}
            src={contentAs.src}
            muted
            loop
            autoPlay
            playsInline
            webkit-playsinline="true"
          />
        );

      case "fullText":
        return (
          <p
            className={styles.FullText}
            dangerouslySetInnerHTML={{
              __html: contentAs.text as string,
            }}
          />
        );

      // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å null
      default:
        return null;
    }
  }

  return null;
};
